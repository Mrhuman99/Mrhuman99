#This is basicaly snake but with enemies added
#I made this using Visual Studio Code
#Also if you couldn't tell already, it's Python
#Updates:
#1. Added code to make the food unable to spawn on the enemy

import turtle
import time
import random

delay = 0.1

#Score
score = 0
high_score = 0

#Window
wn = turtle.Screen()
wn.title("Snake Game by @Mrhuman99")
wn.bgcolor("green")
wn.setup(width=600, height=600)
wn.tracer(0) #Turns off the screen updates

#Snake head
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("black")
head.penup()
head.goto(0,0)
head.direction = "stop"

#Snake food
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0,100)

#Enemy
enemy = turtle.Turtle()
enemy.speed(0)
enemy.shape("triangle")
enemy.color("orange")
enemy.penup()
enemy.goto(50,50)

enemys = []
segments = []

#Enemy set up
new_enemy = turtle.Turtle()
new_enemy.speed(0)
new_enemy.shape("triangle")
new_enemy.color("orange")
new_enemy.penup()
new_enemy.goto(500,500)
enemys.append(new_enemy)

#Pen
pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.penup()
pen.hideturtle()
pen.goto(0, 260)
pen.write("Score: 0  High Score: 0", align="center", font=("Courier", 24, "normal"))

#Functions
def go_up():
    if head.direction != "down":
        head.direction = "up"

def go_down():
    if head.direction != "up":
        head.direction = "down"

def go_left():
    if head.direction != "right":
        head.direction = "left"

def go_right():
    if head.direction != "left":
        head.direction = "right"

def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)

    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)

    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)

    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)

#Keyboard binding
wn.listen()
wn.onkeypress(go_up, "w")
wn.onkeypress(go_down, "s")
wn.onkeypress(go_left, "a")
wn.onkeypress(go_right, "d")

#Main game loop
while True:
    wn.update()
    time.sleep(delay)

    #Check for a collison with the border
    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
        time.sleep(1)
        head.goto(0, 0)
        head.direction = "stop"

        #Hide the segments
        for segment in segments:
            segment.goto(1000, 1000)

        for segment in enemys:
            segment.goto(1000, 1000)

        #Clear the segments list
        segments.clear()
        enemys.clear()

        #Reset the score
        score = 0

        #Reset the delay
        delay = 0.1

        pen.clear()
        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier", 24, "normal"))

    #Check for a collision with the enemy
    if head.distance(enemy) < 20 or head.distance(new_enemy) < 20:
        time.sleep(1)
        head.goto(0, 0)
        head.direction = "stop"

        #Hide the segments
        for segment in segments:
            segment.goto(1000, 1000)

        for segment in enemys:
            segment.goto(1000, 1000)

        #Clear the segments list
        segments.clear()
        enemys.clear()
        #Reset the score
        score = 0

        #Reset the delay
        delay = 0.1

        pen.clear()
        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier", 24, "normal"))

    #Check for a collision with the food
    if head.distance(food) < 20:
        #Move the food to random spot on screen
        x = random.randint(-290,290)
        y = random.randint(-290, 290)
        if x == food.xcor() and y == food.ycor():
            while x == food.xcor() and y == food.ycor():
                x = random.randint(-290,290)
                y = random.randint(-290, 290)
        food.goto(x, y)


        #Add a segment
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("grey")
        new_segment.penup()
        segments.append(new_segment)

        #Add a enemy segment
        new_enemy = turtle.Turtle()
        new_enemy.speed(0)
        new_enemy.shape("triangle")
        new_enemy.color("orange")
        new_enemy.penup()
        x = random.randint(-290,290)
        y = random.randint(-290, 290)
        new_enemy.goto(x,y)
        enemys.append(new_enemy)

        #Shorten the delay
        delay -= 0.001

        #Increase the score
        score += 1
        pen.clear()
        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier", 24, "normal"))

        if score > high_score:
            high_score = score
            pen.clear()
            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier", 24, "normal"))

    #Move the end segments first in reverse order
    for index in range(len(segments)-1, 0, -1):
        x = segments[index-1].xcor()
        y = segments[index-1].ycor()
        segments[index].goto(x, y)

    #Move segment 0 to where head is
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)

    move()

    #Check for head collision with the body segments
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0,0)
            head.direction = "stop"

            #Hide the segments
            for segment in segments:
                segment.goto(1000, 1000)

            for segment in enemys:
                segment.goto(1000, 1000)

            #Clear the segments list
            segments.clear()
            enemys.clear()

            #Reset the score
            score = 0

            #Reset the delay
            delay = 0.1

            pen.clear()
            pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier", 24, "normal"))
wn.mainloop()
